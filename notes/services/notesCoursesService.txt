Jasmine

pending();

fail();

when the service does not have any deps:
declare an instance of the service (new... calls the constructor)
CalculatorsService has a dep = LoggerService
LoggerService has no deps
const calculator = new CalculatorsService(new LoggerService)

expect(result).toBe(2, 'message that is trigger after this test does not pass')

Spies -> check when a function is called
const logger = new LoggerService()
spyOn(logger, 'log') -> object to be spied and function to be verified
expect(logger.log).toHaveBeenCalledTimes(1)

approach should be faking deps

const logger = jasmine.createSpyObj<LoggerService>('LoggerService', ['log'])
logger.log.and.returnValue() -> check what was returned from the log method

when using an instance of the current object, we may use TestBed.inject(object)

x disables the suite; f focus on the suite or the spec

import HttpTestingModule and declare:
    let httpTestingController: HttpTestingController; -> check requests
    in beforeEach fn -> 
        httpTestingController = TestBed.get(HttpTestingController) or 
        TestBed.inject(HttpTestingController)

*** to verify http requests, check the CoursesServices

1) use an instance of the real service
2) import HttpTestingModule
3) declare HttpTestingController
4) inject the deps -> TestBed.inject(HttpTestingController) and TestBed.inject(service)
5) call the function and subscribe to it
6) expects -> 

    it("should retrieve all courses", () => {
        coursesService.findAllCourses().subscribe((courses) => {
        expect(courses).toBeTruthy("No courses returned");

        expect(courses.length).toBe(12, "incorrect number of courses");

        const course = courses.find((course) => course.id == 12);

        expect(course.titles.description).toBe("Angular Testing Course");
        });

        const req = httpTestingController.expectOne("/api/courses");

        expect(req.request.method).toEqual("GET");

        req.flush({ payload: Object.values(COURSES) });

        httpTestingController.verify() -> always called in the end of each http test, so
            we could call in the afterEach() block.
    });

    
7) req -> use the HttpTestingController to make the request and check its type
8) req.flush -> brings the object from the backend (COURSES is the name of the object that contains all courses)
    afterEach(() => {
        httpTestingController.verify();
    });
9) verify function checks if any other request id being made by the service to the specified url or another url

------

verifying the PUT method with saveCourse fn
    it("should save the course data", () => {
    const changes: Partial<Course> = {
      titles: { description: "Testing Course" },
    };

    coursesService.saveCourse(12, changes).subscribe((course) => {
      expect(course.id).toBe(12);
    });

    const req = httpTestingController.expectOne("/api/courses/12");

    expect(req.request.method).toEqual("PUT");

    expect(req.request.body.titles.description).toEqual(
      changes.titles.description
    );

    req.flush({
      ...COURSES[12],
      ...changes,
    });
  });


verifying if the saveCourse fn returns an exception
    it("should give an error if save course fails", () => {
    const changes: Partial<Course> = {
      titles: { description: "Testing Course" },
    };

    coursesService.saveCourse(12, changes).subscribe(
      () => fail("the save course operation should have failed"),

      (error: HttpErrorResponse) => {
        expect(error.status).toBe(500);
      }
    );

    const req = httpTestingController.expectOne("/api/courses/12");

    expect(req.request.method).toEqual("PUT");

    req.flush("Save course failed", {
      status: 500,
      statusText: "Internal Server Error",
    });
  });

    -> 1st argument of flush could be an empty string, null, or undefined
    -> this is where the request receives back the error from the backend
    -> inside the subscribe block, we fail the test, regardless of the correct info sent to the backend


verifying the findLessons method
    it('should return a defined number of lessons within a given page number and sorting order', () => {
        
        coursesService.findLessons(courseId = 12, filter = '', sortOrder = 'asc',
        pageNumber = 0, pageSize = 3).subscribe(lessons => {
            expect(lessons).toBeTruthy()
            expect(lessons.length).toBe(3)
        })

        const req = httpTestingController.expectOne(req => req.url === "/api/lessons");

        expect(req.request.method).toBe('GET');
        expect(req.request.params.get('courseId')).toEqual("12");
        expect(req.request.params.get('filter')).toEqual("");
        expect(req.request.params.get('sortOrder')).toEqual("asc");
        expect(req.request.params.get('pageNumber')).toEqual("0");
        expect(req.request.params.get('pageSize')).toEqual("3");

        req.flush({
            payload: findLessonsForCourse(12).slice(0,3)
        })
    })

    -> some params are defined by default
    -> when mocking the req, we use a fn to check the url is correct. Otherwise, the url 
        must cointain all the query params
            -> expects for the params
    -> the flush function recives the result of the fn run in the backend findLessonsForCourse,
        sliced by the number of lessons in a certain page